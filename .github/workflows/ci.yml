# This file was automatically generated by sbt-github-actions using the
# githubWorkflowGenerate task. You should add and commit this file to
# your git repository. It goes without saying that you shouldn't edit
# this file by hand! Instead, if you wish to make changes, you should
# change your sbt build configuration to revise the workflow description
# to meet your needs, then regenerate this file.

name: Continuous Integration

on:
  pull_request:
    branches: ['*']
  push:
    branches: ['*']

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        scala: [2.12.10]
        java: [adopt@1.8]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Ignore line ending differences in git
        if: contains(runner.os, 'windows')
        shell: bash
        run: git config --global core.autocrlf false

      - name: Checkout current branch (fast)
        uses: actions/checkout@v2

      - name: Setup Java and Scala
        uses: olafurpg/setup-scala@v5
        with:
          java-version: ${{ matrix.java }}

      - name: Setup rm-symlink alias
        if: contains(runner.os, 'windows')
        shell: bash
        run: |
          git config --global alias.rm-symlinks '!'"$(cat <<'ETX'
          __git_rm_symlinks() {
            case "$1" in (-h)
              printf 'usage: git rm-symlinks [symlink] [symlink] [...]\n'
              return 0
            esac
            ppid=$$
            case $# in
              (0) git ls-files -s | grep -E '^120000' | cut -f2 ;;
              (*) printf '%s\n' "$@" ;;
            esac | while IFS= read -r symlink; do
              case "$symlink" in
                (*/*) symdir=${symlink%/*} ;;
                (*) symdir=. ;;
              esac
              git checkout -- "$symlink"
              src="${symdir}/$(cat "$symlink")"
              posix_to_dos_sed='s_^/\([A-Za-z]\)_\1:_;s_/_\\\\_g'
              doslnk=$(printf '%s\n' "$symlink" | sed "$posix_to_dos_sed")
              dossrc=$(printf '%s\n' "$src" | sed "$posix_to_dos_sed")
              if [ -f "$src" ]; then
                rm -f "$symlink"
                cmd //C mklink //H "$doslnk" "$dossrc"
              elif [ -d "$src" ]; then
                rm -f "$symlink"
                cmd //C mklink //J "$doslnk" "$dossrc"
              else
                printf 'error: git-rm-symlink: Not a valid source\n' >&2
                printf '%s =/=> %s  (%s =/=> %s)...\n' \
                    "$symlink" "$src" "$doslnk" "$dossrc" >&2
                false
              fi || printf 'ESC[%d]: %d\n' "$ppid" "$?"
              git update-index --assume-unchanged "$symlink"
            done | awk '
              BEGIN { status_code = 0 }
              /^ESC\['"$ppid"'\]: / { status_code = $2 ; next }
              { print }
              END { exit status_code }
            '
          }
          __git_rm_symlinks
          ETX
          )"
          git config --global alias.rm-symlink '!git rm-symlinks'  # for back-compat.

      - if: contains(runner.os, 'windows')
        shell: bash
        run: git rm-symlink

      - name: Cache ivy2
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-sbt-ivy-cache-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}
          restore-keys: ${{ runner.os }}-sbt-ivy-cache-

      - name: Cache coursier (generic)
        uses: actions/cache@v1
        with:
          path: ~/.coursier/cache/v1
          key: ${{ runner.os }}-generic-sbt-coursier-cache-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}
          restore-keys: ${{ runner.os }}-generic-sbt-coursier-cache-

      - name: Cache coursier (linux)
        if: contains(runner.os, 'linux')
        uses: actions/cache@v1
        with:
          path: ~/.cache/coursier/v1
          key: ${{ runner.os }}-sbt-coursier-cache-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}
          restore-keys: ${{ runner.os }}-sbt-coursier-cache-

      - name: Cache coursier (macOS)
        if: contains(runner.os, 'macos')
        uses: actions/cache@v1
        with:
          path: ~/Library/Caches/Coursier/v1
          key: ${{ runner.os }}-sbt-coursier-cache-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}
          restore-keys: ${{ runner.os }}-sbt-coursier-cache-

      - name: Cache coursier (windows)
        if: contains(runner.os, 'windows')
        uses: actions/cache@v1
        with:
          path: ~/AppData/Local/Coursier/Cache/v1
          key: ${{ runner.os }}-sbt-coursier-cache-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}
          restore-keys: ${{ runner.os }}-sbt-coursier-cache-

      - name: Cache sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt-cache-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}
          restore-keys: ${{ runner.os }}-sbt-coursier-cache-

      - name: Check that workflows are up to date
        shell: bash
        run: sbt ++${{ matrix.scala }} githubWorkflowCheck

      - shell: bash
        run: sbt ++${{ matrix.scala }} test scripted